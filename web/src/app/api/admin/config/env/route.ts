import { NextRequest, NextResponse } from 'next/server';
import { requireApiRole } from '@/lib/auth/server';
import fs from 'node:fs';
import path from 'node:path';

function upsertEnv(content: string, key: string, value: string) {
  const re = new RegExp(`^${key}=.*$`, 'm');
  const line = `${key}=${value}`;
  if (re.test(content)) return content.replace(re, line);
  return content.trimEnd() + `\n${line}\n`;
}

export async function PUT(req: NextRequest) {
  try {
    await requireApiRole(['ADMIN']);
    
    if (process.env.NODE_ENV === 'production') {
      return NextResponse.json({ 
        error: 'config_write_disabled_in_production',
        message: 'Em produção, configure as variáveis de ambiente no provedor (Vercel, Render, etc.)'
      }, { status: 405 });
    }

    const body = await req.json().catch(() => ({}));
    
    const envPath = path.join(process.cwd(), '.env.local');
    let content = '';
    
    try { 
      content = fs.readFileSync(envPath, 'utf8'); 
    } catch { 
      content = '# Environment Variables\n# Generated by PontoFlow Admin Panel\n\n'; 
    }

    // Update all provided keys
    for (const [key, value] of Object.entries(body)) {
      if (typeof value === 'string' && value.trim()) {
        content = upsertEnv(content, key, value);
      }
    }

    fs.writeFileSync(envPath, content, 'utf8');

    return NextResponse.json({ 
      ok: true, 
      message: 'Configurações salvas em .env.local. Reinicie o servidor para aplicar.',
      updated: Object.keys(body).length
    });
  } catch (e: any) {
    if (e instanceof Error && (e.message === 'Unauthorized' || e.message === 'Forbidden')) {
      return NextResponse.json({ error: 'unauthorized' }, { status: 401 });
    }
    return NextResponse.json({ 
      error: e?.message || 'internal_error',
      details: e?.stack 
    }, { status: 500 });
  }
}

export const POST = PUT;

